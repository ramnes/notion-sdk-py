{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>notion-sdk-py is a simple and easy to use client library for the official Notion API.</p> <p>It is meant to be a Python version of the reference JavaScript SDK, so usage should be very similar between both. \ud83d\ude0a (If not, please open an issue or PR!)</p> <p>\ud83d\udce2 Announcement (18-12-2024) \u2014 Release 2.3.0 is out! It adds <code>in_trash</code> support for pages, Python 3.13 official support, fixes and security updates.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install notion-client\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Use Notion's Getting Started Guide to get set up to use Notion's API.</p> <p>Import and initialize a client using an integration token or an OAuth access token.</p> <pre><code>import os\nfrom notion_client import Client\n\nnotion = Client(auth=os.environ[\"NOTION_TOKEN\"])\n</code></pre> <p>In an asyncio environment, use the asynchronous client instead:</p> <pre><code>from notion_client import AsyncClient\n\nnotion = AsyncClient(auth=os.environ[\"NOTION_TOKEN\"])\n</code></pre> <p>Make a request to any Notion API endpoint.</p> <p>See the complete list of endpoints in the API reference.</p> <pre><code>from pprint import pprint\n\nlist_users_response = notion.users.list()\npprint(list_users_response)\n</code></pre> <p>or with the asynchronous client:</p> <pre><code>list_users_response = await notion.users.list()\npprint(list_users_response)\n</code></pre> <p>This would output something like:</p> <pre><code>{'results': [{'avatar_url': 'https://secure.notion-static.com/e6a352a8-8381-44d0-a1dc-9ed80e62b53d.jpg',\n              'id': 'd40e767c-d7af-4b18-a86d-55c61f1e39a4',\n              'name': 'Avocado Lovelace',\n              'object': 'user',\n              'person': {'email': 'avo@example.org'},\n              'type': 'person'},\n             ...]}\n</code></pre> <p>All API endpoints are available in both the synchronous and asynchronous clients.</p> <p>Endpoint parameters are grouped into a single object. You don't need to remember which parameters go in the path, query, or body.</p> <pre><code>my_page = notion.databases.query(\n    **{\n        \"database_id\": \"897e5a76-ae52-4b48-9fdf-e71f5945d1af\",\n        \"filter\": {\n            \"property\": \"Landmark\",\n            \"rich_text\": {\n                \"contains\": \"Bridge\",\n            },\n        },\n    }\n)\n</code></pre>"},{"location":"#handling-errors","title":"Handling errors","text":"<p>If the API returns an unsuccessful response, an <code>APIResponseError</code> will be raised.</p> <p>The error contains properties from the response, and the most helpful is <code>code</code>. You can compare <code>code</code> to the values in the <code>APIErrorCode</code> object to avoid misspelling error codes.</p> <pre><code>import logging\nfrom notion_client import APIErrorCode, APIResponseError\n\ntry:\n    my_page = notion.databases.query(\n        **{\n            \"database_id\": \"897e5a76-ae52-4b48-9fdf-e71f5945d1af\",\n            \"filter\": {\n                \"property\": \"Landmark\",\n                \"rich_text\": {\n                    \"contains\": \"Bridge\",\n                },\n            },\n        }\n    )\nexcept APIResponseError as error:\n    if error.code == APIErrorCode.ObjectNotFound:\n        ...  # For example: handle by asking the user to select a different database\n    else:\n        # Other error handling code\n        logging.error(error)\n</code></pre>"},{"location":"#logging","title":"Logging","text":"<p>The client emits useful information to a logger. By default, it only emits warnings and errors.</p> <p>If you're debugging an application, and would like the client to log request &amp; response bodies, set the <code>log_level</code> option to <code>logging.DEBUG</code>.</p> <pre><code>notion = Client(\n    auth=os.environ[\"NOTION_TOKEN\"],\n    log_level=logging.DEBUG,\n)\n</code></pre> <p>You may also set a custom <code>logger</code> to emit logs to a destination other than <code>stdout</code>. Have a look at Python's logging cookbook if you want to create your own logger.</p>"},{"location":"#client-options","title":"Client options","text":"<p><code>Client</code> and <code>AsyncClient</code> both support the following options on initialization. These options are all keys in the single constructor parameter.</p> Option Default value Type Description <code>auth</code> <code>None</code> <code>string</code> Bearer token for authentication. If left undefined, the <code>auth</code> parameter should be set on each request. <code>log_level</code> <code>logging.WARNING</code> <code>int</code> Verbosity of logs the instance will produce. By default, logs are written to <code>stdout</code>. <code>timeout_ms</code> <code>60_000</code> <code>int</code> Number of milliseconds to wait before emitting a <code>RequestTimeoutError</code> <code>base_url</code> <code>\"https://api.notion.com\"</code> <code>string</code> The root URL for sending API requests. This can be changed to test with a mock server. <code>logger</code> Log to console <code>logging.Logger</code> A custom logger."},{"location":"#full-api-responses","title":"Full API responses","text":"<p>The following functions can distinguish between full and partial API responses.</p> Function Purpose <code>is_full_page</code> Determine whether an object is a full Page object <code>is_full_block</code> Determine whether an object is a full Block object <code>is_full_database</code> Determine whether an object is a full Database object <code>is_full_page_or_database</code> Determine whether an object is a full Page object or Database object <code>is_full_user</code> Determine whether an object is a full User object <code>is_full_comment</code> Determine whether an object is a full Comment object <pre><code>from notion_client.helpers import is_full_page\n\nfull_or_partial_pages = await notion.databases.query(\n    database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n)\n\nfor page in full_or_partial_pages[\"results\"]:\n    if not is_full_page_or_database(page):\n        continue\n    print(f\"Created at: {page['created_time']}\")\n</code></pre>"},{"location":"#utility-functions","title":"Utility functions","text":"<p>These functions can be helpful for dealing with any of the paginated APIs.</p> <p><code>iterate_paginated_api(function, **kwargs)</code> and its async version <code>async_iterate_paginated_api(function, **kwargs)</code> turn any paginated API into a generator.</p> <p>The <code>function</code> parameter must accept a <code>start_cursor</code> argument. Example: <code>notion.blocks.children.list</code>.</p> <pre><code>from notion_client.helpers import iterate_paginated_api\n\nfor block in iterate_paginated_api(\n    notion.databases.query, database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n):\n    # Do something with block.\n    ...\n</code></pre> <p>If you don't need a generator, <code>collect_paginated_api(function, **kwargs)</code> and its async version <code>async_collect_paginated_api(function, **kwargs)</code> have the same behavior than the previous functions, but return a list of all results from the paginated API.</p> <pre><code>from notion_client.helpers import collect_paginated_api\n\nall_results = collect_paginated_api(\n    notion.databases.query, database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n)\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Run the tests with the <code>pytest</code> command. If you want to test against all Python versions, you can run <code>tox</code> instead.</p> <p>The tests are using <code>pytest-vcr</code>'s cassettes for simulating requests to the Notion API. To create new tests or run them without cassettes, you need to set up the environment variables <code>NOTION_TOKEN</code> and <code>NOTION_TEST_PAGE_ID</code> (a page where your integration has all the capabilities enabled).</p> <p>The code will use the page at <code>NOTION_TEST_PAGE_ID</code> to generate a temporary environment with the Notion objects to be tested, which will be deleted at the end of the session.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>This package supports the following minimum versions:</p> <ul> <li>Python &gt;= 3.7</li> <li>httpx &gt;= 0.15.0</li> </ul> <p>Earlier versions may still work, but we encourage people building new applications to upgrade to the current stable.</p>"},{"location":"#getting-help","title":"Getting help","text":"<p>If you want to submit a feature request for Notion's API, or are experiencing any issues with the API platform, please email <code>developers@makenotion.com</code>.</p> <p>If you found a bug with the library, please submit an issue.</p>"},{"location":"#_1","title":"Home","text":""},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>User guides<ul> <li>Quick start</li> <li>Structured logging</li> <li>More examples</li> </ul> </li> <li>Reference<ul> <li>Client</li> <li>API endpoints</li> <li>Errors</li> <li>Helpers</li> </ul> </li> <li>Development<ul> <li>Coverage report</li> <li>Contributing guidelines</li> </ul> </li> <li>License</li> </ul>"},{"location":"license/","title":"License","text":"<pre><code>The MIT License (MIT)\n\nCopyright (c) 2021-2023 Guillaume Gelin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"contributing/contributing/","title":"Contributing guidelines","text":"<p>Tip</p> <p>If you are a first time contributor, please start by reading this fantastic guide.</p> <p>Any serious contribution to notion-sdk-py is always welcome, regardless of your experience.</p> <p>If you want to contribute on the code specifically:</p> <ol> <li>Install Git and Python on your system.</li> <li>Fork the repository and clone it.</li> <li> <p>Checkout a new feature branch from <code>main</code>:</p> <pre><code>git checkout my-feature\n</code></pre> </li> <li> <p>Install dependencies inside a virtual environment:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate\npip install -r requirements/dev.txt\n</code></pre> </li> <li> <p>Install pre-commit hooks:</p> <pre><code>pre-commit install\n</code></pre> </li> </ol> <p>You should now be ready to hack!</p> <p>You can run the tests with <code>pytest</code> in the main directory. Please make sure the tests (and pre-commit hooks) pass before opening a pull request.</p> <p>Coverage must stay at 100%. Write tests if you add new features.</p> <p>Thanks for your help!</p>"},{"location":"reference/api_endpoints/","title":"API endpoints","text":"<p>Notion API endpoints.</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksChildrenEndpoint","title":"<code>BlocksChildrenEndpoint</code>","text":"<p>               Bases: <code>Endpoint</code></p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>class BlocksChildrenEndpoint(Endpoint):\n    def append(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Create and append new children blocks to the block using the ID specified.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/patch-block-children)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"blocks/{block_id}/children\",\n            method=\"PATCH\",\n            body=pick(kwargs, \"children\", \"after\"),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def list(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Return a paginated array of child [block objects](https://developers.notion.com/reference/block) contained in the block.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-block-children)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"blocks/{block_id}/children\",\n            method=\"GET\",\n            query=pick(kwargs, \"start_cursor\", \"page_size\"),\n            auth=kwargs.get(\"auth\"),\n        )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksChildrenEndpoint.append","title":"<code>append(block_id, **kwargs)</code>","text":"<p>Create and append new children blocks to the block using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def append(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Create and append new children blocks to the block using the ID specified.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/patch-block-children)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"blocks/{block_id}/children\",\n        method=\"PATCH\",\n        body=pick(kwargs, \"children\", \"after\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksChildrenEndpoint.list","title":"<code>list(block_id, **kwargs)</code>","text":"<p>Return a paginated array of child block objects contained in the block.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def list(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Return a paginated array of child [block objects](https://developers.notion.com/reference/block) contained in the block.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-block-children)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"blocks/{block_id}/children\",\n        method=\"GET\",\n        query=pick(kwargs, \"start_cursor\", \"page_size\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksEndpoint","title":"<code>BlocksEndpoint</code>","text":"<p>               Bases: <code>Endpoint</code></p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>class BlocksEndpoint(Endpoint):\n    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n        super().__init__(*args, **kwargs)\n        self.children = BlocksChildrenEndpoint(*args, **kwargs)\n\n    def retrieve(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Retrieve a [Block object](https://developers.notion.com/reference/block) using the ID specified.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-block)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"blocks/{block_id}\", method=\"GET\", auth=kwargs.get(\"auth\")\n        )\n\n    def update(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Update the content for the specified `block_id` based on the block type.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/update-a-block)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"blocks/{block_id}\",\n            method=\"PATCH\",\n            body=pick(\n                kwargs,\n                \"embed\",\n                \"type\",\n                \"archived\",\n                \"bookmark\",\n                \"image\",\n                \"video\",\n                \"pdf\",\n                \"file\",\n                \"audio\",\n                \"code\",\n                \"equation\",\n                \"divider\",\n                \"breadcrumb\",\n                \"table_of_contents\",\n                \"link_to_page\",\n                \"table_row\",\n                \"heading_1\",\n                \"heading_2\",\n                \"heading_3\",\n                \"paragraph\",\n                \"bulleted_list_item\",\n                \"numbered_list_item\",\n                \"quote\",\n                \"to_do\",\n                \"toggle\",\n                \"template\",\n                \"callout\",\n                \"synced_block\",\n                \"table\",\n            ),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def delete(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Set a [Block object](https://developers.notion.com/reference/block), including page blocks, to `archived: true`.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/delete-a-block)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"blocks/{block_id}\",\n            method=\"DELETE\",\n            auth=kwargs.get(\"auth\"),\n        )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksEndpoint.delete","title":"<code>delete(block_id, **kwargs)</code>","text":"<p>Set a Block object, including page blocks, to <code>archived: true</code>.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def delete(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Set a [Block object](https://developers.notion.com/reference/block), including page blocks, to `archived: true`.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/delete-a-block)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"blocks/{block_id}\",\n        method=\"DELETE\",\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksEndpoint.retrieve","title":"<code>retrieve(block_id, **kwargs)</code>","text":"<p>Retrieve a Block object using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def retrieve(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Retrieve a [Block object](https://developers.notion.com/reference/block) using the ID specified.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-block)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"blocks/{block_id}\", method=\"GET\", auth=kwargs.get(\"auth\")\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksEndpoint.update","title":"<code>update(block_id, **kwargs)</code>","text":"<p>Update the content for the specified <code>block_id</code> based on the block type.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def update(self, block_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Update the content for the specified `block_id` based on the block type.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/update-a-block)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"blocks/{block_id}\",\n        method=\"PATCH\",\n        body=pick(\n            kwargs,\n            \"embed\",\n            \"type\",\n            \"archived\",\n            \"bookmark\",\n            \"image\",\n            \"video\",\n            \"pdf\",\n            \"file\",\n            \"audio\",\n            \"code\",\n            \"equation\",\n            \"divider\",\n            \"breadcrumb\",\n            \"table_of_contents\",\n            \"link_to_page\",\n            \"table_row\",\n            \"heading_1\",\n            \"heading_2\",\n            \"heading_3\",\n            \"paragraph\",\n            \"bulleted_list_item\",\n            \"numbered_list_item\",\n            \"quote\",\n            \"to_do\",\n            \"toggle\",\n            \"template\",\n            \"callout\",\n            \"synced_block\",\n            \"table\",\n        ),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.CommentsEndpoint","title":"<code>CommentsEndpoint</code>","text":"<p>               Bases: <code>Endpoint</code></p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>class CommentsEndpoint(Endpoint):\n    def create(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Create a new comment in the specified page or existing discussion thread.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/create-a-comment)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=\"comments\",\n            method=\"POST\",\n            body=pick(kwargs, \"parent\", \"discussion_id\", \"rich_text\"),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def list(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Retrieve a list of un-resolved [Comment objects](https://developers.notion.com/reference/comment-object) from the specified block.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-comment)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=\"comments\",\n            method=\"GET\",\n            query=pick(kwargs, \"block_id\", \"start_cursor\", \"page_size\"),\n            auth=kwargs.get(\"auth\"),\n        )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.CommentsEndpoint.create","title":"<code>create(**kwargs)</code>","text":"<p>Create a new comment in the specified page or existing discussion thread.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def create(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Create a new comment in the specified page or existing discussion thread.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/create-a-comment)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=\"comments\",\n        method=\"POST\",\n        body=pick(kwargs, \"parent\", \"discussion_id\", \"rich_text\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.CommentsEndpoint.list","title":"<code>list(**kwargs)</code>","text":"<p>Retrieve a list of un-resolved Comment objects from the specified block.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def list(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Retrieve a list of un-resolved [Comment objects](https://developers.notion.com/reference/comment-object) from the specified block.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-comment)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=\"comments\",\n        method=\"GET\",\n        query=pick(kwargs, \"block_id\", \"start_cursor\", \"page_size\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint","title":"<code>DatabasesEndpoint</code>","text":"<p>               Bases: <code>Endpoint</code></p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>class DatabasesEndpoint(Endpoint):\n    def list(self, **kwargs: Any) -&gt; SyncAsync[Any]:  # pragma: no cover\n        \"\"\"List all [Databases](https://developers.notion.com/reference/database) shared with the authenticated integration.\n\n        &gt; \u26a0\ufe0f  **Deprecated endpoint**\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-databases)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=\"databases\",\n            method=\"GET\",\n            query=pick(kwargs, \"start_cursor\", \"page_size\"),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def query(self, database_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Get a list of [Pages](https://developers.notion.com/reference/page) contained in the database.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/post-database-query)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"databases/{database_id}/query\",\n            method=\"POST\",\n            query=pick(kwargs, \"filter_properties\"),\n            body=pick(kwargs, \"filter\", \"sorts\", \"start_cursor\", \"page_size\"),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def retrieve(self, database_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Retrieve a [Database object](https://developers.notion.com/reference/database) using the ID specified.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-database)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"databases/{database_id}\", method=\"GET\", auth=kwargs.get(\"auth\")\n        )\n\n    def create(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Create a database as a subpage in the specified parent page.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/create-a-database)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=\"databases\",\n            method=\"POST\",\n            body=pick(\n                kwargs, \"parent\", \"title\", \"properties\", \"icon\", \"cover\", \"is_inline\"\n            ),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def update(self, database_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Update an existing database as specified by the parameters.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/update-a-database)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"databases/{database_id}\",\n            method=\"PATCH\",\n            body=pick(\n                kwargs,\n                \"properties\",\n                \"title\",\n                \"description\",\n                \"icon\",\n                \"cover\",\n                \"is_inline\",\n            ),\n            auth=kwargs.get(\"auth\"),\n        )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.create","title":"<code>create(**kwargs)</code>","text":"<p>Create a database as a subpage in the specified parent page.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def create(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Create a database as a subpage in the specified parent page.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/create-a-database)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=\"databases\",\n        method=\"POST\",\n        body=pick(\n            kwargs, \"parent\", \"title\", \"properties\", \"icon\", \"cover\", \"is_inline\"\n        ),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.list","title":"<code>list(**kwargs)</code>","text":"<p>List all Databases shared with the authenticated integration.</p> <p>\u26a0\ufe0f  Deprecated endpoint</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def list(self, **kwargs: Any) -&gt; SyncAsync[Any]:  # pragma: no cover\n    \"\"\"List all [Databases](https://developers.notion.com/reference/database) shared with the authenticated integration.\n\n    &gt; \u26a0\ufe0f  **Deprecated endpoint**\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-databases)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=\"databases\",\n        method=\"GET\",\n        query=pick(kwargs, \"start_cursor\", \"page_size\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.query","title":"<code>query(database_id, **kwargs)</code>","text":"<p>Get a list of Pages contained in the database.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def query(self, database_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Get a list of [Pages](https://developers.notion.com/reference/page) contained in the database.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/post-database-query)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"databases/{database_id}/query\",\n        method=\"POST\",\n        query=pick(kwargs, \"filter_properties\"),\n        body=pick(kwargs, \"filter\", \"sorts\", \"start_cursor\", \"page_size\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.retrieve","title":"<code>retrieve(database_id, **kwargs)</code>","text":"<p>Retrieve a Database object using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def retrieve(self, database_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Retrieve a [Database object](https://developers.notion.com/reference/database) using the ID specified.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-database)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"databases/{database_id}\", method=\"GET\", auth=kwargs.get(\"auth\")\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.update","title":"<code>update(database_id, **kwargs)</code>","text":"<p>Update an existing database as specified by the parameters.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def update(self, database_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Update an existing database as specified by the parameters.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/update-a-database)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"databases/{database_id}\",\n        method=\"PATCH\",\n        body=pick(\n            kwargs,\n            \"properties\",\n            \"title\",\n            \"description\",\n            \"icon\",\n            \"cover\",\n            \"is_inline\",\n        ),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesEndpoint","title":"<code>PagesEndpoint</code>","text":"<p>               Bases: <code>Endpoint</code></p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>class PagesEndpoint(Endpoint):\n    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n        super().__init__(*args, **kwargs)\n        self.properties = PagesPropertiesEndpoint(*args, **kwargs)\n\n    def create(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Create a new page in the specified database or as a child of an existing page.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/post-page)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=\"pages\",\n            method=\"POST\",\n            body=pick(kwargs, \"parent\", \"properties\", \"children\", \"icon\", \"cover\"),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def retrieve(self, page_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Retrieve a [Page object](https://developers.notion.com/reference/page) using the ID specified.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-page)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"pages/{page_id}\",\n            method=\"GET\",\n            query=pick(kwargs, \"filter_properties\"),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def update(self, page_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Update [page property values](https://developers.notion.com/reference/page#property-value-object) for the specified page.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/patch-page)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"pages/{page_id}\",\n            method=\"PATCH\",\n            body=pick(kwargs, \"in_trash\", \"archived\", \"properties\", \"icon\", \"cover\"),\n            auth=kwargs.get(\"auth\"),\n        )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesEndpoint.create","title":"<code>create(**kwargs)</code>","text":"<p>Create a new page in the specified database or as a child of an existing page.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def create(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Create a new page in the specified database or as a child of an existing page.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/post-page)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=\"pages\",\n        method=\"POST\",\n        body=pick(kwargs, \"parent\", \"properties\", \"children\", \"icon\", \"cover\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesEndpoint.retrieve","title":"<code>retrieve(page_id, **kwargs)</code>","text":"<p>Retrieve a Page object using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def retrieve(self, page_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Retrieve a [Page object](https://developers.notion.com/reference/page) using the ID specified.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-page)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"pages/{page_id}\",\n        method=\"GET\",\n        query=pick(kwargs, \"filter_properties\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesEndpoint.update","title":"<code>update(page_id, **kwargs)</code>","text":"<p>Update page property values for the specified page.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def update(self, page_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Update [page property values](https://developers.notion.com/reference/page#property-value-object) for the specified page.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/patch-page)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"pages/{page_id}\",\n        method=\"PATCH\",\n        body=pick(kwargs, \"in_trash\", \"archived\", \"properties\", \"icon\", \"cover\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesPropertiesEndpoint","title":"<code>PagesPropertiesEndpoint</code>","text":"<p>               Bases: <code>Endpoint</code></p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>class PagesPropertiesEndpoint(Endpoint):\n    def retrieve(self, page_id: str, property_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Retrieve a `property_item` object for a given `page_id` and `property_id`.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-page-property)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"pages/{page_id}/properties/{property_id}\",\n            method=\"GET\",\n            auth=kwargs.get(\"auth\"),\n            query=pick(kwargs, \"start_cursor\", \"page_size\"),\n        )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesPropertiesEndpoint.retrieve","title":"<code>retrieve(page_id, property_id, **kwargs)</code>","text":"<p>Retrieve a <code>property_item</code> object for a given <code>page_id</code> and <code>property_id</code>.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def retrieve(self, page_id: str, property_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Retrieve a `property_item` object for a given `page_id` and `property_id`.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/retrieve-a-page-property)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"pages/{page_id}/properties/{property_id}\",\n        method=\"GET\",\n        auth=kwargs.get(\"auth\"),\n        query=pick(kwargs, \"start_cursor\", \"page_size\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.SearchEndpoint","title":"<code>SearchEndpoint</code>","text":"<p>               Bases: <code>Endpoint</code></p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>class SearchEndpoint(Endpoint):\n    def __call__(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Search all pages and child pages that are shared with the integration.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/post-search)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=\"search\",\n            method=\"POST\",\n            body=pick(kwargs, \"query\", \"sort\", \"filter\", \"start_cursor\", \"page_size\"),\n            auth=kwargs.get(\"auth\"),\n        )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.SearchEndpoint.__call__","title":"<code>__call__(**kwargs)</code>","text":"<p>Search all pages and child pages that are shared with the integration.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def __call__(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Search all pages and child pages that are shared with the integration.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/post-search)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=\"search\",\n        method=\"POST\",\n        body=pick(kwargs, \"query\", \"sort\", \"filter\", \"start_cursor\", \"page_size\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.UsersEndpoint","title":"<code>UsersEndpoint</code>","text":"<p>               Bases: <code>Endpoint</code></p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>class UsersEndpoint(Endpoint):\n    def list(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Return a paginated list of [Users](https://developers.notion.com/reference/user) for the workspace.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-users)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=\"users\",\n            method=\"GET\",\n            query=pick(kwargs, \"start_cursor\", \"page_size\"),\n            auth=kwargs.get(\"auth\"),\n        )\n\n    def retrieve(self, user_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Retrieve a [User](https://developers.notion.com/reference/user) using the ID specified.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-user)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=f\"users/{user_id}\", method=\"GET\", auth=kwargs.get(\"auth\")\n        )\n\n    def me(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n        \"\"\"Retrieve the bot [User](https://developers.notion.com/reference/user) associated with the API token.\n\n        *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-self)*\n        \"\"\"  # noqa: E501\n        return self.parent.request(\n            path=\"users/me\", method=\"GET\", auth=kwargs.get(\"auth\")\n        )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.UsersEndpoint.list","title":"<code>list(**kwargs)</code>","text":"<p>Return a paginated list of Users for the workspace.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def list(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Return a paginated list of [Users](https://developers.notion.com/reference/user) for the workspace.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-users)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=\"users\",\n        method=\"GET\",\n        query=pick(kwargs, \"start_cursor\", \"page_size\"),\n        auth=kwargs.get(\"auth\"),\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.UsersEndpoint.me","title":"<code>me(**kwargs)</code>","text":"<p>Retrieve the bot User associated with the API token.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def me(self, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Retrieve the bot [User](https://developers.notion.com/reference/user) associated with the API token.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-self)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=\"users/me\", method=\"GET\", auth=kwargs.get(\"auth\")\n    )\n</code></pre>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.UsersEndpoint.retrieve","title":"<code>retrieve(user_id, **kwargs)</code>","text":"<p>Retrieve a User using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p> Source code in <code>notion_client/api_endpoints.py</code> <pre><code>def retrieve(self, user_id: str, **kwargs: Any) -&gt; SyncAsync[Any]:\n    \"\"\"Retrieve a [User](https://developers.notion.com/reference/user) using the ID specified.\n\n    *[\ud83d\udd17 Endpoint documentation](https://developers.notion.com/reference/get-user)*\n    \"\"\"  # noqa: E501\n    return self.parent.request(\n        path=f\"users/{user_id}\", method=\"GET\", auth=kwargs.get(\"auth\")\n    )\n</code></pre>"},{"location":"reference/client/","title":"Client","text":"<p>Synchronous and asynchronous clients for Notion's API.</p>"},{"location":"reference/client/#notion_client.client.AsyncClient","title":"<code>AsyncClient</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Asynchronous client for Notion's API.</p> Source code in <code>notion_client/client.py</code> <pre><code>class AsyncClient(BaseClient):\n    \"\"\"Asynchronous client for Notion's API.\"\"\"\n\n    client: httpx.AsyncClient\n\n    def __init__(\n        self,\n        options: Optional[Union[Dict[str, Any], ClientOptions]] = None,\n        client: Optional[httpx.AsyncClient] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        if client is None:\n            client = httpx.AsyncClient()\n        super().__init__(client, options, **kwargs)\n\n    async def __aenter__(self) -&gt; \"AsyncClient\":\n        self.client = httpx.AsyncClient()\n        await self.client.__aenter__()\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: Type[BaseException],\n        exc_value: BaseException,\n        traceback: TracebackType,\n    ) -&gt; None:\n        await self.client.__aexit__(exc_type, exc_value, traceback)\n        del self._clients[-1]\n\n    async def aclose(self) -&gt; None:\n        \"\"\"Close the connection pool of the current inner client.\"\"\"\n        await self.client.aclose()\n\n    async def request(\n        self,\n        path: str,\n        method: str,\n        query: Optional[Dict[Any, Any]] = None,\n        body: Optional[Dict[Any, Any]] = None,\n        auth: Optional[str] = None,\n    ) -&gt; Any:\n        \"\"\"Send an HTTP request asynchronously.\"\"\"\n        request = self._build_request(method, path, query, body, auth)\n        try:\n            response = await self.client.send(request)\n        except httpx.TimeoutException:\n            raise RequestTimeoutError()\n        return self._parse_response(response)\n</code></pre>"},{"location":"reference/client/#notion_client.client.AsyncClient.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>Close the connection pool of the current inner client.</p> Source code in <code>notion_client/client.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"Close the connection pool of the current inner client.\"\"\"\n    await self.client.aclose()\n</code></pre>"},{"location":"reference/client/#notion_client.client.AsyncClient.request","title":"<code>request(path, method, query=None, body=None, auth=None)</code>  <code>async</code>","text":"<p>Send an HTTP request asynchronously.</p> Source code in <code>notion_client/client.py</code> <pre><code>async def request(\n    self,\n    path: str,\n    method: str,\n    query: Optional[Dict[Any, Any]] = None,\n    body: Optional[Dict[Any, Any]] = None,\n    auth: Optional[str] = None,\n) -&gt; Any:\n    \"\"\"Send an HTTP request asynchronously.\"\"\"\n    request = self._build_request(method, path, query, body, auth)\n    try:\n        response = await self.client.send(request)\n    except httpx.TimeoutException:\n        raise RequestTimeoutError()\n    return self._parse_response(response)\n</code></pre>"},{"location":"reference/client/#notion_client.client.Client","title":"<code>Client</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Synchronous client for Notion's API.</p> Source code in <code>notion_client/client.py</code> <pre><code>class Client(BaseClient):\n    \"\"\"Synchronous client for Notion's API.\"\"\"\n\n    client: httpx.Client\n\n    def __init__(\n        self,\n        options: Optional[Union[Dict[Any, Any], ClientOptions]] = None,\n        client: Optional[httpx.Client] = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        if client is None:\n            client = httpx.Client()\n        super().__init__(client, options, **kwargs)\n\n    def __enter__(self) -&gt; \"Client\":\n        self.client = httpx.Client()\n        self.client.__enter__()\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Type[BaseException],\n        exc_value: BaseException,\n        traceback: TracebackType,\n    ) -&gt; None:\n        self.client.__exit__(exc_type, exc_value, traceback)\n        del self._clients[-1]\n\n    def close(self) -&gt; None:\n        \"\"\"Close the connection pool of the current inner client.\"\"\"\n        self.client.close()\n\n    def request(\n        self,\n        path: str,\n        method: str,\n        query: Optional[Dict[Any, Any]] = None,\n        body: Optional[Dict[Any, Any]] = None,\n        auth: Optional[str] = None,\n    ) -&gt; Any:\n        \"\"\"Send an HTTP request.\"\"\"\n        request = self._build_request(method, path, query, body, auth)\n        try:\n            response = self.client.send(request)\n        except httpx.TimeoutException:\n            raise RequestTimeoutError()\n        return self._parse_response(response)\n</code></pre>"},{"location":"reference/client/#notion_client.client.Client.close","title":"<code>close()</code>","text":"<p>Close the connection pool of the current inner client.</p> Source code in <code>notion_client/client.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"Close the connection pool of the current inner client.\"\"\"\n    self.client.close()\n</code></pre>"},{"location":"reference/client/#notion_client.client.Client.request","title":"<code>request(path, method, query=None, body=None, auth=None)</code>","text":"<p>Send an HTTP request.</p> Source code in <code>notion_client/client.py</code> <pre><code>def request(\n    self,\n    path: str,\n    method: str,\n    query: Optional[Dict[Any, Any]] = None,\n    body: Optional[Dict[Any, Any]] = None,\n    auth: Optional[str] = None,\n) -&gt; Any:\n    \"\"\"Send an HTTP request.\"\"\"\n    request = self._build_request(method, path, query, body, auth)\n    try:\n        response = self.client.send(request)\n    except httpx.TimeoutException:\n        raise RequestTimeoutError()\n    return self._parse_response(response)\n</code></pre>"},{"location":"reference/client/#notion_client.client.ClientOptions","title":"<code>ClientOptions</code>  <code>dataclass</code>","text":"<p>Options to configure the client.</p> <p>Attributes:</p> Name Type Description <code>auth</code> <code>Optional[str]</code> <p>Bearer token for authentication. If left undefined, the <code>auth</code> parameter should be set on each request.</p> <code>timeout_ms</code> <code>int</code> <p>Number of milliseconds to wait before emitting a <code>RequestTimeoutError</code>.</p> <code>base_url</code> <code>str</code> <p>The root URL for sending API requests. This can be changed to test with a mock server.</p> <code>log_level</code> <code>int</code> <p>Verbosity of logs the instance will produce. By default, logs are written to <code>stdout</code>.</p> <code>logger</code> <code>Optional[Logger]</code> <p>A custom logger.</p> <code>notion_version</code> <code>str</code> <p>Notion version to use.</p> Source code in <code>notion_client/client.py</code> <pre><code>@dataclass\nclass ClientOptions:\n    \"\"\"Options to configure the client.\n\n    Attributes:\n        auth: Bearer token for authentication. If left undefined, the `auth` parameter\n            should be set on each request.\n        timeout_ms: Number of milliseconds to wait before emitting a\n            `RequestTimeoutError`.\n        base_url: The root URL for sending API requests. This can be changed to test with\n            a mock server.\n        log_level: Verbosity of logs the instance will produce. By default, logs are\n            written to `stdout`.\n        logger: A custom logger.\n        notion_version: Notion version to use.\n    \"\"\"\n\n    auth: Optional[str] = None\n    timeout_ms: int = 60_000\n    base_url: str = \"https://api.notion.com\"\n    log_level: int = logging.WARNING\n    logger: Optional[logging.Logger] = None\n    notion_version: str = \"2022-06-28\"\n</code></pre>"},{"location":"reference/errors/","title":"Errors","text":"<p>Custom exceptions for notion-sdk-py.</p> <p>This module defines the exceptions that can be raised when an error occurs.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode","title":"<code>APIErrorCode</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>notion_client/errors.py</code> <pre><code>class APIErrorCode(str, Enum):\n    Unauthorized = \"unauthorized\"\n    \"\"\"The bearer token is not valid.\"\"\"\n\n    RestrictedResource = \"restricted_resource\"\n    \"\"\"Given the bearer token used, the client doesn't have permission to\n    perform this operation.\"\"\"\n\n    ObjectNotFound = \"object_not_found\"\n    \"\"\"Given the bearer token used, the resource does not exist.\n    This error can also indicate that the resource has not been shared with owner\n    of the bearer token.\"\"\"\n\n    RateLimited = \"rate_limited\"\n    \"\"\"This request exceeds the number of requests allowed. Slow down and try again.\"\"\"\n\n    InvalidJSON = \"invalid_json\"\n    \"\"\"The request body could not be decoded as JSON.\"\"\"\n\n    InvalidRequestURL = \"invalid_request_url\"\n    \"\"\"The request URL is not valid.\"\"\"\n\n    InvalidRequest = \"invalid_request\"\n    \"\"\"This request is not supported.\"\"\"\n\n    ValidationError = \"validation_error\"\n    \"\"\"The request body does not match the schema for the expected parameters.\"\"\"\n\n    ConflictError = \"conflict_error\"\n    \"\"\"The transaction could not be completed, potentially due to a data collision.\n    Make sure the parameters are up to date and try again.\"\"\"\n\n    InternalServerError = \"internal_server_error\"\n    \"\"\"An unexpected error occurred. Reach out to Notion support.\"\"\"\n\n    ServiceUnavailable = \"service_unavailable\"\n    \"\"\"Notion is unavailable. Try again later.\n    This can occur when the time to respond to a request takes longer than 60 seconds,\n    the maximum request timeout.\"\"\"\n</code></pre>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.ConflictError","title":"<code>ConflictError = 'conflict_error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The transaction could not be completed, potentially due to a data collision. Make sure the parameters are up to date and try again.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.InternalServerError","title":"<code>InternalServerError = 'internal_server_error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An unexpected error occurred. Reach out to Notion support.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.InvalidJSON","title":"<code>InvalidJSON = 'invalid_json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The request body could not be decoded as JSON.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.InvalidRequest","title":"<code>InvalidRequest = 'invalid_request'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>This request is not supported.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.InvalidRequestURL","title":"<code>InvalidRequestURL = 'invalid_request_url'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The request URL is not valid.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.ObjectNotFound","title":"<code>ObjectNotFound = 'object_not_found'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Given the bearer token used, the resource does not exist. This error can also indicate that the resource has not been shared with owner of the bearer token.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.RateLimited","title":"<code>RateLimited = 'rate_limited'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>This request exceeds the number of requests allowed. Slow down and try again.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.RestrictedResource","title":"<code>RestrictedResource = 'restricted_resource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Given the bearer token used, the client doesn't have permission to perform this operation.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.ServiceUnavailable","title":"<code>ServiceUnavailable = 'service_unavailable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Notion is unavailable. Try again later. This can occur when the time to respond to a request takes longer than 60 seconds, the maximum request timeout.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.Unauthorized","title":"<code>Unauthorized = 'unauthorized'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The bearer token is not valid.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.ValidationError","title":"<code>ValidationError = 'validation_error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The request body does not match the schema for the expected parameters.</p>"},{"location":"reference/errors/#notion_client.errors.APIResponseError","title":"<code>APIResponseError</code>","text":"<p>               Bases: <code>HTTPResponseError</code></p> <p>An error raised by Notion API.</p> Source code in <code>notion_client/errors.py</code> <pre><code>class APIResponseError(HTTPResponseError):\n    \"\"\"An error raised by Notion API.\"\"\"\n\n    code: APIErrorCode\n\n    def __init__(\n        self, response: httpx.Response, message: str, code: APIErrorCode\n    ) -&gt; None:\n        super().__init__(response, message)\n        self.code = code\n</code></pre>"},{"location":"reference/errors/#notion_client.errors.HTTPResponseError","title":"<code>HTTPResponseError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception for HTTP errors.</p> <p>Responses from the API use HTTP response codes that are used to indicate general classes of success and error.</p> Source code in <code>notion_client/errors.py</code> <pre><code>class HTTPResponseError(Exception):\n    \"\"\"Exception for HTTP errors.\n\n    Responses from the API use HTTP response codes that are used to indicate general\n    classes of success and error.\n    \"\"\"\n\n    code: str = \"notionhq_client_response_error\"\n    status: int\n    headers: httpx.Headers\n    body: str\n\n    def __init__(self, response: httpx.Response, message: Optional[str] = None) -&gt; None:\n        if message is None:\n            message = (\n                f\"Request to Notion API failed with status: {response.status_code}\"\n            )\n        super().__init__(message)\n        self.status = response.status_code\n        self.headers = response.headers\n        self.body = response.text\n</code></pre>"},{"location":"reference/errors/#notion_client.errors.RequestTimeoutError","title":"<code>RequestTimeoutError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception for requests that timeout.</p> <p>The request that we made waits for a specified period of time or maximum number of retries to get the response. But if no response comes within the limited time or retries, then this Exception is raised.</p> Source code in <code>notion_client/errors.py</code> <pre><code>class RequestTimeoutError(Exception):\n    \"\"\"Exception for requests that timeout.\n\n    The request that we made waits for a specified period of time or maximum number of\n    retries to get the response. But if no response comes within the limited time or\n    retries, then this Exception is raised.\n    \"\"\"\n\n    code = \"notionhq_client_request_timeout\"\n\n    def __init__(self, message: str = \"Request to Notion API has timed out\") -&gt; None:\n        super().__init__(message)\n</code></pre>"},{"location":"reference/errors/#notion_client.errors.is_api_error_code","title":"<code>is_api_error_code(code)</code>","text":"<p>Check if given code belongs to the list of valid API error codes.</p> Source code in <code>notion_client/errors.py</code> <pre><code>def is_api_error_code(code: str) -&gt; bool:\n    \"\"\"Check if given code belongs to the list of valid API error codes.\"\"\"\n    if isinstance(code, str):\n        return code in (error_code.value for error_code in APIErrorCode)\n    return False\n</code></pre>"},{"location":"reference/helpers/","title":"Helpers","text":"<p>Utility functions for notion-sdk-py.</p>"},{"location":"reference/helpers/#notion_client.helpers.async_collect_paginated_api","title":"<code>async_collect_paginated_api(function, **kwargs)</code>  <code>async</code>","text":"<p>Collect asynchronously all the results of paginating an API into a list.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>async def async_collect_paginated_api(\n    function: Callable[..., Awaitable[Any]], **kwargs: Any\n) -&gt; List[Any]:\n    \"\"\"Collect asynchronously all the results of paginating an API into a list.\"\"\"\n    return [result async for result in async_iterate_paginated_api(function, **kwargs)]\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.async_iterate_paginated_api","title":"<code>async_iterate_paginated_api(function, **kwargs)</code>  <code>async</code>","text":"<p>Return an async iterator over the results of any paginated Notion API.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>async def async_iterate_paginated_api(\n    function: Callable[..., Awaitable[Any]], **kwargs: Any\n) -&gt; AsyncGenerator[List[Any], None]:\n    \"\"\"Return an async iterator over the results of any paginated Notion API.\"\"\"\n    next_cursor = kwargs.pop(\"start_cursor\", None)\n\n    while True:\n        response = await function(**kwargs, start_cursor=next_cursor)\n        for result in response.get(\"results\"):\n            yield result\n\n        next_cursor = response.get(\"next_cursor\")\n        if (not response[\"has_more\"]) | (next_cursor is None):\n            return\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.collect_paginated_api","title":"<code>collect_paginated_api(function, **kwargs)</code>","text":"<p>Collect all the results of paginating an API into a list.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def collect_paginated_api(function: Callable[..., Any], **kwargs: Any) -&gt; List[Any]:\n    \"\"\"Collect all the results of paginating an API into a list.\"\"\"\n    return [result for result in iterate_paginated_api(function, **kwargs)]\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.get_id","title":"<code>get_id(url)</code>","text":"<p>Return the id of the object behind the given URL.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def get_id(url: str) -&gt; str:\n    \"\"\"Return the id of the object behind the given URL.\"\"\"\n    parsed = urlparse(url)\n    if parsed.netloc not in (\"notion.so\", \"www.notion.so\"):\n        raise ValueError(\"Not a valid Notion URL.\")\n    path = parsed.path\n    if len(path) &lt; 32:\n        raise ValueError(\"The path in the URL seems to be incorrect.\")\n    raw_id = path[-32:]\n    return str(UUID(raw_id))\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.get_url","title":"<code>get_url(object_id)</code>","text":"<p>Return the URL for the object with the given id.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def get_url(object_id: str) -&gt; str:\n    \"\"\"Return the URL for the object with the given id.\"\"\"\n    return f\"https://notion.so/{UUID(object_id).hex}\"\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_equation_rich_text_item_response","title":"<code>is_equation_rich_text_item_response(rich_text)</code>","text":"<p>Return <code>True</code> if <code>rich_text</code> is an equation.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_equation_rich_text_item_response(rich_text: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if `rich_text` is an equation.\"\"\"\n    return rich_text.get(\"type\") == \"equation\"\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_full_block","title":"<code>is_full_block(response)</code>","text":"<p>Return <code>True</code> if response is a full block.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_full_block(response: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if response is a full block.\"\"\"\n    return response.get(\"object\") == \"block\" and \"type\" in response\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_full_comment","title":"<code>is_full_comment(response)</code>","text":"<p>Return <code>True</code> if response is a full comment.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_full_comment(response: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if response is a full comment.\"\"\"\n    return \"type\" in response\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_full_database","title":"<code>is_full_database(response)</code>","text":"<p>Return <code>True</code> if response is a full database.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_full_database(response: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if response is a full database.\"\"\"\n    return response.get(\"object\") == \"database\" and \"title\" in response\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_full_page","title":"<code>is_full_page(response)</code>","text":"<p>Return <code>True</code> if response is a full page.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_full_page(response: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if response is a full page.\"\"\"\n    return response.get(\"object\") == \"page\" and \"url\" in response\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_full_page_or_database","title":"<code>is_full_page_or_database(response)</code>","text":"<p>Return <code>True</code> if <code>response</code> is a full database or a full page.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_full_page_or_database(response: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if `response` is a full database or a full page.\"\"\"\n    if response.get(\"object\") == \"database\":\n        return is_full_database(response)\n    return is_full_page(response)\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_full_user","title":"<code>is_full_user(response)</code>","text":"<p>Return <code>True</code> if response is a full user.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_full_user(response: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if response is a full user.\"\"\"\n    return \"type\" in response\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_mention_rich_text_item_response","title":"<code>is_mention_rich_text_item_response(rich_text)</code>","text":"<p>Return <code>True</code> if <code>rich_text</code> is a mention.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_mention_rich_text_item_response(rich_text: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if `rich_text` is a mention.\"\"\"\n    return rich_text.get(\"type\") == \"mention\"\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.is_text_rich_text_item_response","title":"<code>is_text_rich_text_item_response(rich_text)</code>","text":"<p>Return <code>True</code> if <code>rich_text</code> is a text.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def is_text_rich_text_item_response(rich_text: Dict[Any, Any]) -&gt; bool:\n    \"\"\"Return `True` if `rich_text` is a text.\"\"\"\n    return rich_text.get(\"type\") == \"text\"\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.iterate_paginated_api","title":"<code>iterate_paginated_api(function, **kwargs)</code>","text":"<p>Return an iterator over the results of any paginated Notion API.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def iterate_paginated_api(\n    function: Callable[..., Any], **kwargs: Any\n) -&gt; Generator[List[Any], None, None]:\n    \"\"\"Return an iterator over the results of any paginated Notion API.\"\"\"\n    next_cursor = kwargs.pop(\"start_cursor\", None)\n\n    while True:\n        response = function(**kwargs, start_cursor=next_cursor)\n        for result in response.get(\"results\"):\n            yield result\n\n        next_cursor = response.get(\"next_cursor\")\n        if not response.get(\"has_more\") or not next_cursor:\n            return\n</code></pre>"},{"location":"reference/helpers/#notion_client.helpers.pick","title":"<code>pick(base, *keys)</code>","text":"<p>Return a dict composed of key value pairs for keys passed as args.</p> Source code in <code>notion_client/helpers.py</code> <pre><code>def pick(base: Dict[Any, Any], *keys: str) -&gt; Dict[Any, Any]:\n    \"\"\"Return a dict composed of key value pairs for keys passed as args.\"\"\"\n    result = {}\n    for key in keys:\n        if key not in base:\n            continue\n        value = base.get(key)\n        if value is None and key == \"start_cursor\":\n            continue\n        result[key] = value\n    return result\n</code></pre>"},{"location":"user_guides/quick_start/","title":"Quick start","text":"<p>Get started with notion-sdk-py in just 5 minutes!</p>"},{"location":"user_guides/quick_start/#setup","title":"Setup","text":""},{"location":"user_guides/quick_start/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you have <code>python</code> and <code>pip</code> properly installed in your system.</p> <pre><code>python --version\npip --version\n</code></pre> </li> <li> <p>Create a new directory and move into it to follow along with this tutorial.</p> <pre><code>mkdir learn-notion-sdk-py &amp;&amp; cd learn-notion-sdk-py\n</code></pre> </li> </ul>"},{"location":"user_guides/quick_start/#installation","title":"Installation","text":"<ul> <li> <p>Create a virtual environment and activate it.</p> <pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\n</code></pre> </li> <li> <p>Install <code>notion-sdk-py</code> using <code>pip</code></p> <pre><code>pip install --upgrade notion-client\n</code></pre> </li> </ul>"},{"location":"user_guides/quick_start/#integration","title":"Integration","text":"<ul> <li> <p>Go to notion.so/my-integrations to create an integration. Copy the token given by Notion.</p> </li> <li> <p>Make it available in your environment:</p> <pre><code>export NOTION_TOKEN=secret_abcd12345\n</code></pre> </li> </ul> <p>Tip</p> <p>Don't forget that <code>export</code> only puts the variable in the environment of the current shell. If you don't want to redo this step for every new shell, add the line in your shell configuration or use a configuration library like dotenv.</p>"},{"location":"user_guides/quick_start/#play","title":"Play","text":"<p>Copy paste the code, and have fun tweaking it!</p> <p>Let's start by initializing the client:</p> <pre><code>import os\nfrom notion_client import Client\n\nnotion = Client(auth=os.environ[\"NOTION_TOKEN\"])\n</code></pre> <p>Let's now fetch the list of users in the scope of our integration:</p> <pre><code>users = notion.users.list()\n\nfor user in users.get(\"results\"):\n    name, user_type = user[\"name\"], user[\"type\"]\n    emoji = \"\ud83d\ude05\" if user[\"type\"] == \"bot\" else \"\ud83d\ude4b\u200d\u2642\ufe0f\"\n    print(f\"{name} is a {user_type} {emoji}\")\n</code></pre> <p>It should output something in those lines:</p> <pre><code>Aahnik Daw is a person \ud83d\ude4b\u200d\u2642\ufe0f\nTestIntegation is a bot \ud83d\ude05\n</code></pre> <p>Do you see your name and the name of your integration?</p> <p>\ud83c\udf89 Congratulations, you are now ready to use notion-sdk-py!</p>"},{"location":"user_guides/structured_logging/","title":"Structured logging","text":"<p>You can easily get structured logging with notion-sdk-py by using structlog:</p> <pre><code>logger = structlog.wrap_logger(\n    logging.getLogger(\"notion-client\"),\n    logger_factory=structlog.stdlib.LoggerFactory(),\n    wrapper_class=structlog.stdlib.BoundLogger,\n)\n\nnotion = Client(auth=token, logger=logger, log_level=logging.DEBUG)\n</code></pre> <p>Don't forget to add the dependency to your project!</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}